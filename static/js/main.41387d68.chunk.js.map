{"version":3,"sources":["components/Leaderboard.js","questions/questions.js","components/Quiz.js","components/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["LeaderBoard","props","leaderBoard","scores","map","el","react_default","a","createElement","name","score","style","position","top","height","width","display","alignItems","justifyContent","flexDirection","questions","question","query","code","param","Quiz","state","currentQuestion","undefined","correct","started","finished","result","queryMaker","concat","fetchCorrectAnswer","_callee","queryCorrect","regenerator_default","wrap","_context","prev","next","_this","axios","post","variables","then","setState","data","country","catch","err","console","log","stop","fetchAlternatives","_callee2","response","newArr","num","_context2","countries","sent","makeOptions","Math","floor","random","length","options","handleNameChange","e","target","value","startGame","setQuestions","originalQuestions","handleChoice","answer","submitAnswer","getQuestion","alert","arr","this","splice","pop","push","update","prevProps","prevState","updateTheLeaderBoard","i","index_es","control","label","key","paddingTop","aria-label","onChange","onClick","color","Component","Dashboard","updateLeaderBoard","obj","localStorage","setItem","JSON","stringify","getItem","parse","getLeaderBoard","Leaderboard","className","components_Quiz","App","container","alignContent","justifycontent","item","lg","md","sm","components_Dashboard","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.41387d68.chunk.js","sourcesContent":["import React from 'react';\n\nconst LeaderBoard = (props) => {\n\n  let {leaderBoard} = props;\n\n  let scores = leaderBoard && leaderBoard.map(el => {\n    return (\n      <div>\n      <span>{el.name}</span>\n      <span> {el.score[0]}</span>\n      <span> of</span>\n      <span> {el.score[0] + el.score[1]}</span>\n      </div>\n    )});\n\n  return (\n    <div style={{position:'absolute', top:'0', height:'20%', width:'100%', display:'flex', alignItems:'center', justifyContent:'center', flexDirection:'column'}}>\n    {leaderBoard ? scores : 'NO SCORES YET'}\n    </div>\n  )\n\n};\n\nexport default LeaderBoard;","const questions = [\n  {\n    question: \"What is the name of the Central African Republic in their native tongue?\",\n    query: {code: 'CF', param:'native' }\n  },\n  {\n    question: \"What is the currency in Ivory Coast\",\n    query: {code: 'CI', param:'currency' }\n  },\n  {\n    question: \"What is the Native Name for the United Arab Emirates?\",\n    query: {code: 'AE', param:'native' }\n  },\n  {\n    question: \"What is Germany called in German?\",\n    query: {code: 'DE', param:'native' }\n  },\n  {\n    question: \"What is currency of The Netherlands\",\n    query: {code: 'NL', param:'currency' }\n  }\n]\n\nexport default questions;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport originalQuestions from '../questions/questions';\nimport { Button, Input, Card, RadioGroup, FormControl, FormControlLabel, Radio } from '@material-ui/core';\n\nclass Quiz extends Component {\n  state = {\n    currentQuestion: undefined,\n    correct: '',\n    name: 'Player1',\n    started: false,\n    finished: false,\n    result: [0, 0]\n  }\n\n\n  async setQuestions (arr) {\n    const questions = [...arr]\n    this.setState({ questions });\n  }\n\n  async getQuestion () {\n    let { questions } = this.state;\n    if (questions.length) {\n      let num = Math.floor(Math.random() * questions.length);\n      let currentQuestion = questions.splice(num, 1);\n      currentQuestion = currentQuestion.pop();\n      this.setState({ questions, currentQuestion })\n    }\n    else {\n      this.setState({ finished: true })\n    }\n  }\n\n  queryMaker = (param, code) => {\n    return code ? `query{country(code:\"${code}\"){${param}}}` :\n      `query{countries{${param}}}`\n  }\n\n  makeOptions (arr, param) {\n    let newArr = [];\n    while (newArr.length < 4) {\n      let num = Math.floor(Math.random() * arr.length);\n      arr[num][param] !== this.state.correct &&\n        newArr.push(arr[num][param])\n    }\n    return newArr;\n  }\n\n  fetchCorrectAnswer = async (param, code) => {\n    let queryCorrect = this.queryMaker(param, code)\n    axios.post('https://countries.trevorblades.com/graphql', { query: queryCorrect, variables: {} })\n      .then(result => this.setState({ correct: result.data.data.country[param] }))\n      .catch(err => console.log(err))\n  }\n\n  fetchAlternatives = async (param) => {\n    let queryCorrect = this.queryMaker(param)\n    let response = await axios.post('https://countries.trevorblades.com/graphql', { query: queryCorrect, variables: {} })\n      .then(result => { return result.data.data.countries })\n    let newArr = await this.makeOptions(response, param);\n    let num = Math.floor(Math.random() * newArr.length);\n    newArr[num] = this.state.correct;\n    this.setState({ options: newArr })\n  }\n\n  updateTheLeaderBoard () {\n    const result = {\n      name: this.state.name,\n      score: this.state.result\n    }\n    this.props.update(result);\n    this.setState({\n      questions: undefined,\n      currentQuestion: undefined,\n      options: undefined,\n      correct: '',\n      name: 'Player1',\n      started: false,\n      finished: false,\n      result: [0, 0]\n    })\n  }\n\n\n\n  componentDidUpdate (prevProps, prevState) {\n    (!prevState.questions && this.state.questions) && this.getQuestion();\n\n    if (this.state.currentQuestion) {\n\n    (this.state.currentQuestion !== prevState.currentQuestion) && (this.fetchCorrectAnswer(this.state.currentQuestion.query.param, this.state.currentQuestion.query.code));\n\n    (prevState.correct !== this.state.correct) && this.fetchAlternatives(this.state.currentQuestion.query.param);\n    }\n    ((prevState.finished !== this.state.finished) && this.state.finished) && this.updateTheLeaderBoard();\n  }\n\n  handleNameChange = e => {\n    this.setState({ name: e.target.value })\n  }\n\n  startGame = () => {\n    this.setQuestions(originalQuestions)\n    this.setState({ started: true })\n  }\n\n  handleChoice = e => {\n    this.setState({ answer: e.target.value })\n  }\n\n  submitAnswer = e => {\n    let { result } = this.state;\n    if (!this.state.answer) alert('Please enter an answer!');\n    else {\n      this.state.answer === this.state.correct ? result[0]++ : result[1]++;\n      this.setState({ result });\n      this.getQuestion()\n    }\n  }\n\n  render () {\n    const options = this.state.options && this.state.options.map((el,i) => {\n      return (\n        <FormControlLabel value={el} control={<Radio />} label={el} key={i} />\n      )\n    });\n    if (!this.state.started) {\n      return (\n        <Card style={{ display: 'flex', flexDirection: 'column' }}>\n          <Input value={this.state.name} onChange={this.handleNameChange} />\n          <Button onClick={this.startGame}>START</Button>\n        </Card>\n      )\n    }\n    return this.state.options ?\n      <Card style={{ display: 'flex', flexDirection: 'column', width: '80%', height: '60%', justifyContent: 'space-between', paddingTop:'20%' }}>\n        <span>{this.state.currentQuestion.question}</span>\n        <FormControl>\n          <RadioGroup\n            aria-label=\"answers\"\n            name=\"answer\"\n            value={this.state.answer}\n            onChange={this.handleChoice}\n          >\n            {options}\n          </RadioGroup>\n          <Button onClick={this.submitAnswer} style={{ color: 'light-green' }}>ANSWER</Button>\n        </FormControl>\n      </Card>\n      : <span>LOADING</span>\n  }\n\n}\n\nexport default Quiz;","import React, { Component } from 'react';\nimport LeaderBoard from './Leaderboard';\nimport Quiz from './Quiz';\n\nclass Dashboard extends Component {\n  state = {\n    leaderBoard: undefined\n  }\n\n  getLeaderBoard () {\n    let leaderBoard = localStorage.getItem('leaderBoard');\n    leaderBoard && (leaderBoard = JSON.parse(leaderBoard));\n    leaderBoard && this.setState({ leaderBoard });\n  }\n  updateLeaderBoard = obj => {\n    let {leaderBoard} = this.state;\n    if (leaderBoard) leaderBoard.push(obj);\n    else {\n      leaderBoard = [];\n      leaderBoard.push(obj);\n    }\n    this.setState({leaderBoard});\n    localStorage.setItem('leaderBoard', JSON.stringify(leaderBoard))\n  }\n\n  componentDidMount () {\n    this.getLeaderBoard();\n  }\n\n  render () {\n\n    let { leaderBoard } = this.state;\n    return (\n      <div style={{width:'100%', height:'100%', display:'flex', flexDirection:'column',  alignItems:'center', justifyContent:'center'}}>\n        <LeaderBoard className=\"test\" leaderBoard={leaderBoard}  />\n        <Quiz style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center' }} update={this.updateLeaderBoard} />\n      </div>\n    )\n  }\n\n\n}\n\nexport default Dashboard;","import React, { Component } from 'react';\nimport './App.css';\nimport Dashboard from './components/Dashboard';\nimport { Grid } from '@material-ui/core'\n\nclass App extends Component {\n  render () {\n    return (\n      <Grid container style={{height:'100%', width:'100%',display:'flex', flexDirection:'column'}} alignContent='center' justifycontent='center'>\n        <Grid item lg={8} md={12} sm={12} style={{height:'100%', width:'100%',display:'flex', flexDirection:'column', alignItems:'center', justifycontent:'center'}} >\n          <Dashboard style={{ height: '100%', width: '100%',display:'flex', flexDirection:'column', alignItems:'center', justifycontent:'center' }} />\n        </Grid>\n      </Grid>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}